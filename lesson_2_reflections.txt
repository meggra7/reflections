What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository it creates a hidden .git file in the directory.  This is necessary so that Git has a
file to track the commits and changes that are made.


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is the middle ground between the working directory and the repository.  The staging area contains
only the part of the working directory that you wish to commit.  It is different from the repository in that these
files are not actually part of the repository - yet - but rather are the files that want to put in the repository.
This is valuable in that it gives you a chance to play around with files and changes prior to actually committing
them in the repository.


How can you use the staging area to make sure you have one commit per logical change?

It is a good idea to review the changes between the working directory, the staging area, and the commit log to make
sure you are committing a single logical change at a time.  Even if you have multiple changes you want to commit, you
can use the staging area to add a single change and commit, then continue adding any additional changes from the
working directory to the staging area and committing again, as needed.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches would be helpful in situations where you want to try out different experimental features or create different
versions of a file or program.  Different versions may include a different language, different game difficulty, free
version vs paid version, etc.  Branches would help because you would be able to work on those different versions and
track your changes separately from the main file.  This means you can experiment without fear of messing up your
main, current, working version.


How do the diagrams help you visualize the branch structure?

Diagrams easily show the linear structure of each branch and where it originates from the master branch.  It also
easily shows which commits are accessible through each branch.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Mergins two branches together creates a single branch that includes all commits from both branches in chronological
order based on the individual timestamps.  It is represented in the diagram as two branches joining together because
once you work off of the merge commit, all previous commits from both branches are now accessible from the new
commit/branch.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Git's automatic merging process is definitely a much faster process than having to go through all of your code
manually and combining changes (PRO).  However, it isn't foolproof and can't always tell which is the correct code
CON).  In these cases it is beneficial to be able to compare files manually and choosing which is the correct code to
use.